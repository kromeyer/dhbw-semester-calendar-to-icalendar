// Generated by CoffeeScript 1.6.2
/*
  @author   Patrick Kromeyer
*/

var Engine;

Engine = (function() {
  var STATE_CLOSED, STATE_OPEN, STATE_REJECTED;

  STATE_OPEN = 'stateOpen';

  STATE_CLOSED = 'stateClosed';

  STATE_REJECTED = 'stateRejected';

  function Engine(callback) {
    this._counter = 0;
    this._channelState = [];
    this._channelContent = [];
    this._callback = callback;
  }

  Engine.prototype._isReady = function() {
    var id;

    for (id in this._channelState) {
      if (this._channelState[id] === STATE_OPEN) {
        return false;
      }
    }
    return true;
  };

  Engine.prototype._handle = function() {
    if (!this._isReady()) {
      return;
    }
    return this._callback();
  };

  Engine.prototype.createChannel = function() {
    var channelId;

    channelId = this._counter++;
    this._channelState[channelId] = STATE_OPEN;
    this._channelContent[channelId] = '';
    return channelId;
  };

  Engine.prototype.appendToChannel = function(id, content) {
    if (this._channelState[id] !== STATE_OPEN) {
      throw 'channel is closed, rejected or undefined';
    }
    this._channelContent[id] += content;
  };

  Engine.prototype.closeChannel = function(id) {
    if (this._channelState[id] !== STATE_OPEN) {
      throw 'channel is allready closed, rejected or undefined';
    }
    this._channelState[id] = STATE_CLOSED;
    this._handle();
  };

  Engine.prototype.rejectChannel = function(id) {
    if (this._channelState[id] !== STATE_OPEN) {
      throw 'channel is allready rejected, closed or undefined';
    }
    this._channelContent[id] = null;
    this._channelState[id] = STATE_REJECTED;
    this._handle();
  };

  return Engine;

})();

module.exports = Engine;
