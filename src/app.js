// Generated by CoffeeScript 1.6.2
/*
  @author   Patrick Kromeyer
*/

var ICalendarEngine, SimpleCache, cache, http, isNumber, moment, semesterPlanParser, url;

http = require('http');

url = require('url');

moment = require('moment');

ICalendarEngine = require('./ICalendarEngine.js');

semesterPlanParser = require('./semesterPlanParser.js');

isNumber = require('./isNumber.js');

SimpleCache = require('./SimpleCache.js');

cache = new SimpleCache();

http.createServer(function(req, res) {
  var cacheKey, engine, getUrl, limit, parts, timestamp, validReq, weekInSeconds, _results;

  parts = url.parse(req.url, true);
  validReq = isNumber(parts.query.gid) && isNumber(parts.query.uid);
  if (!validReq) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end('invalid parameter found!');
    return;
  }
  cacheKey = parts.query.gid.toString() + parts.query.uid.toString();
  if (cache.hasItem(cacheKey)) {
    res.writeHead(200, {
      'Content-Type': 'text/calendar',
      'Content-Encoding': 'utf-8'
    });
    res.write(cache.getItem(cacheKey));
    res.end();
    return;
  }
  engine = new ICalendarEngine(semesterPlanParser, function(result) {
    cache.setItem(cacheKey, result, 60 * 60 * 60);
    res.writeHead(200, {
      'Content-Type': 'text/calendar',
      'Content-Encoding': 'utf-8'
    });
    res.write(result);
    return res.end();
  });
  timestamp = moment().day(1).startOf('day').unix();
  weekInSeconds = 60 * 60 * 24 * 7;
  limit = timestamp + (weekInSeconds * 12);
  _results = [];
  while (timestamp <= limit) {
    getUrl = url.format({
      'protocol': 'http',
      'hostname': 'vorlesungsplan.dhbw-mannheim.de',
      'pathname': 'index.php',
      'query': {
        'action': 'view',
        'gid': parts.query.gid,
        'uid': parts.query.uid,
        'date': timestamp
      }
    });
    (function() {
      var channelId;

      channelId = engine.createChannel();
      return http.get(getUrl, function(subRes) {
        return subRes.on('data', function(chunk) {
          var e;

          try {
            return engine.appendToChannel(channelId, chunk);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        }).on('end', function() {
          var e;

          try {
            return engine.closeChannel(channelId);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        }).on('close', function() {
          var e;

          try {
            return engine.closeChannel(channelId);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        });
      }).on('error', function() {
        var e;

        try {
          return engine.rejectChannel(channelId);
        } catch (_error) {
          e = _error;
          return console.log(e);
        }
      });
    })();
    _results.push(timestamp += weekInSeconds);
  }
  return _results;
}).listen(process.env.PORT || 9000);
